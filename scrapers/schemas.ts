import { z } from 'zod';

// Job Listing Schema
export const JobListingSchema = z.object({
  title: z.string().min(1, { message: 'Title is required' }),
  company: z.string().min(1, { message: 'Company is required' }),
  description: z.string().optional(), // Assuming description can be an empty string
  location: z.string().min(1, { message: 'Location is required' }),
  url: z.string().url({ message: 'Invalid URL format' }),
  salary: z.string().optional(),
  job_type: z.string().optional(), // Consider an enum if there are fixed types: z.enum(['FULL_TIME', 'PART_TIME', 'CONTRACT']).optional(),
  date_posted: z.string().optional().refine((val) => !val || /^\d{4}-\d{2}-\d{2}(T\d{2}:\d{2}:\d{2}(\.\d+)?Z?)?$/.test(val), { message: 'Invalid date format, expected YYYY-MM-DD or ISO string' }),
  external_id: z.string().optional(),
  is_remote: z.boolean().optional().default(false),
  skills: z.string().optional(),
  source: z.string().url({ message: 'Invalid source URL format' }).optional(), // Or just z.string() if it's not always a URL
  status: z.string().optional().default('active'),
  // Ensure all properties from the JobListing type are covered
}).strip(); // Use .strip() to remove any properties not in the schema

// Event Listing Schema
// Note: 'id' is usually generated by the DB, so not included here from scraper output.
export const EventListingSchema = z.object({
  title: z.string().min(1, { message: 'Title is required' }),
  description: z.string().optional(),
  location: z.string().optional(), // Making optional as sometimes it's just venue/address
  venue: z.string().optional(),
  address: z.string().optional(),
  start_date: z.string().regex(/^\d{4}-\d{2}-\d{2}$/, { message: 'Invalid start_date format, expected YYYY-MM-DD' }),
  end_date: z.string().regex(/^\d{4}-\d{2}-\d{2}$/, { message: 'Invalid end_date format, expected YYYY-MM-DD' }).optional().or(z.literal('')), // Allow empty string
  start_time: z.string().optional(), // Consider regex if a specific time format is expected
  end_time: z.string().optional(),   // Consider regex
  image_url: z.string().url({ message: 'Invalid image URL format' }).optional().or(z.literal('')),
  category: z.string().optional(),
  tags: z.string().optional(),
  url: z.string().url({ message: 'Invalid event URL format' }),
  price: z.string().optional(),
  is_free: z.union([z.boolean(), z.number().min(0).max(1)]).optional().default(false).transform(val => val === 1 || val === true), // Normalize to boolean
  organizer: z.string().optional(),
  source: z.string().url({ message: 'Invalid source URL format' }), // Or just z.string()
  // Ensure all properties from the EventListing type are covered
}).strip(); // Use .strip() to remove any properties not in the schema
